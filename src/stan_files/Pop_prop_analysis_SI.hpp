#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0

#include <stan/model/model_header.hpp>

namespace model_Pop_prop_analysis_SI_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_Pop_prop_analysis_SI");
    reader.add_event(83, 81, "end", "model_Pop_prop_analysis_SI");
    return reader;
}

#include <meta_header.hpp>
 class model_Pop_prop_analysis_SI
  : public stan::model::model_base_crtp<model_Pop_prop_analysis_SI> {
private:
        int n_prey_samps_SI;
        int n_preys;
        int n_preds;
        int isos;
        std::vector<int> prey_ix_SI;
        std::vector<vector_d> preys_SI;
        std::vector<vector_d> preym_SI;
        std::vector<vector_d> mean_cs;
        std::vector<vector_d> sigma_cs;
        std::vector<vector_d> preds_SI;
public:
    model_Pop_prop_analysis_SI(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_Pop_prop_analysis_SI(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_Pop_prop_analysis_SI_namespace::model_Pop_prop_analysis_SI";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "n_prey_samps_SI", "int", context__.to_vec());
            n_prey_samps_SI = int(0);
            vals_i__ = context__.vals_i("n_prey_samps_SI");
            pos__ = 0;
            n_prey_samps_SI = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_prey_samps_SI", n_prey_samps_SI, 1);

            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n_preys", "int", context__.to_vec());
            n_preys = int(0);
            vals_i__ = context__.vals_i("n_preys");
            pos__ = 0;
            n_preys = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_preys", n_preys, 1);

            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n_preds", "int", context__.to_vec());
            n_preds = int(0);
            vals_i__ = context__.vals_i("n_preds");
            pos__ = 0;
            n_preds = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_preds", n_preds, 1);

            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "isos", "int", context__.to_vec());
            isos = int(0);
            vals_i__ = context__.vals_i("isos");
            pos__ = 0;
            isos = vals_i__[pos__++];
            check_greater_or_equal(function__, "isos", isos, 1);

            current_statement_begin__ = 6;
            validate_non_negative_index("prey_ix_SI", "n_prey_samps_SI", n_prey_samps_SI);
            context__.validate_dims("data initialization", "prey_ix_SI", "int", context__.to_vec(n_prey_samps_SI));
            prey_ix_SI = std::vector<int>(n_prey_samps_SI, int(0));
            vals_i__ = context__.vals_i("prey_ix_SI");
            pos__ = 0;
            size_t prey_ix_SI_k_0_max__ = n_prey_samps_SI;
            for (size_t k_0__ = 0; k_0__ < prey_ix_SI_k_0_max__; ++k_0__) {
                prey_ix_SI[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 7;
            validate_non_negative_index("preys_SI", "isos", isos);
            validate_non_negative_index("preys_SI", "n_prey_samps_SI", n_prey_samps_SI);
            context__.validate_dims("data initialization", "preys_SI", "vector_d", context__.to_vec(n_prey_samps_SI,isos));
            preys_SI = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(n_prey_samps_SI, Eigen::Matrix<double, Eigen::Dynamic, 1>(isos));
            vals_r__ = context__.vals_r("preys_SI");
            pos__ = 0;
            size_t preys_SI_j_1_max__ = isos;
            size_t preys_SI_k_0_max__ = n_prey_samps_SI;
            for (size_t j_1__ = 0; j_1__ < preys_SI_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < preys_SI_k_0_max__; ++k_0__) {
                    preys_SI[k_0__](j_1__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 8;
            validate_non_negative_index("preym_SI", "isos", isos);
            validate_non_negative_index("preym_SI", "n_preys", n_preys);
            context__.validate_dims("data initialization", "preym_SI", "vector_d", context__.to_vec(n_preys,isos));
            preym_SI = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(n_preys, Eigen::Matrix<double, Eigen::Dynamic, 1>(isos));
            vals_r__ = context__.vals_r("preym_SI");
            pos__ = 0;
            size_t preym_SI_j_1_max__ = isos;
            size_t preym_SI_k_0_max__ = n_preys;
            for (size_t j_1__ = 0; j_1__ < preym_SI_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < preym_SI_k_0_max__; ++k_0__) {
                    preym_SI[k_0__](j_1__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 9;
            validate_non_negative_index("mean_cs", "isos", isos);
            validate_non_negative_index("mean_cs", "n_preys", n_preys);
            context__.validate_dims("data initialization", "mean_cs", "vector_d", context__.to_vec(n_preys,isos));
            mean_cs = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(n_preys, Eigen::Matrix<double, Eigen::Dynamic, 1>(isos));
            vals_r__ = context__.vals_r("mean_cs");
            pos__ = 0;
            size_t mean_cs_j_1_max__ = isos;
            size_t mean_cs_k_0_max__ = n_preys;
            for (size_t j_1__ = 0; j_1__ < mean_cs_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < mean_cs_k_0_max__; ++k_0__) {
                    mean_cs[k_0__](j_1__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 10;
            validate_non_negative_index("sigma_cs", "isos", isos);
            validate_non_negative_index("sigma_cs", "n_preys", n_preys);
            context__.validate_dims("data initialization", "sigma_cs", "vector_d", context__.to_vec(n_preys,isos));
            sigma_cs = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(n_preys, Eigen::Matrix<double, Eigen::Dynamic, 1>(isos));
            vals_r__ = context__.vals_r("sigma_cs");
            pos__ = 0;
            size_t sigma_cs_j_1_max__ = isos;
            size_t sigma_cs_k_0_max__ = n_preys;
            for (size_t j_1__ = 0; j_1__ < sigma_cs_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < sigma_cs_k_0_max__; ++k_0__) {
                    sigma_cs[k_0__](j_1__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 11;
            validate_non_negative_index("preds_SI", "isos", isos);
            validate_non_negative_index("preds_SI", "n_preds", n_preds);
            context__.validate_dims("data initialization", "preds_SI", "vector_d", context__.to_vec(n_preds,isos));
            preds_SI = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(n_preds, Eigen::Matrix<double, Eigen::Dynamic, 1>(isos));
            vals_r__ = context__.vals_r("preds_SI");
            pos__ = 0;
            size_t preds_SI_j_1_max__ = isos;
            size_t preds_SI_k_0_max__ = n_preds;
            for (size_t j_1__ = 0; j_1__ < preds_SI_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < preds_SI_k_0_max__; ++k_0__) {
                    preds_SI[k_0__](j_1__) = vals_r__[pos__++];
                }
            }


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 14;
            validate_non_negative_index("prey_means_SI", "isos", isos);
            validate_non_negative_index("prey_means_SI", "n_preys", n_preys);
            num_params_r__ += (isos * n_preys);
            current_statement_begin__ = 15;
            validate_non_negative_index("cc", "isos", isos);
            validate_non_negative_index("cc", "n_preys", n_preys);
            num_params_r__ += (isos * n_preys);
            current_statement_begin__ = 16;
            validate_non_negative_index("cons_prey_SI", "isos", isos);
            validate_non_negative_index("cons_prey_SI", "n_preys", n_preys);
            num_params_r__ += (isos * n_preys);
            current_statement_begin__ = 18;
            validate_non_negative_index("corr_prey", "isos", isos);
            validate_non_negative_index("corr_prey", "isos", isos);
            validate_non_negative_index("corr_prey", "n_preys", n_preys);
            num_params_r__ += (((isos * (isos - 1)) / 2) * n_preys);
            current_statement_begin__ = 19;
            validate_non_negative_index("corr_pred", "isos", isos);
            validate_non_negative_index("corr_pred", "isos", isos);
            num_params_r__ += ((isos * (isos - 1)) / 2);
            current_statement_begin__ = 20;
            validate_non_negative_index("corr_mean", "isos", isos);
            validate_non_negative_index("corr_mean", "isos", isos);
            num_params_r__ += ((isos * (isos - 1)) / 2);
            current_statement_begin__ = 21;
            validate_non_negative_index("tau_prey", "isos", isos);
            validate_non_negative_index("tau_prey", "n_preys", n_preys);
            num_params_r__ += (isos * n_preys);
            current_statement_begin__ = 22;
            validate_non_negative_index("tau_mean", "isos", isos);
            num_params_r__ += isos;
            current_statement_begin__ = 23;
            validate_non_negative_index("tau_pred", "isos", isos);
            num_params_r__ += isos;
            current_statement_begin__ = 24;
            validate_non_negative_index("props", "n_preys", n_preys);
            num_params_r__ += (1 * n_preys);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_Pop_prop_analysis_SI() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 14;
        if (!(context__.contains_r("prey_means_SI")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable prey_means_SI missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("prey_means_SI");
        pos__ = 0U;
        validate_non_negative_index("prey_means_SI", "isos", isos);
        validate_non_negative_index("prey_means_SI", "n_preys", n_preys);
        context__.validate_dims("parameter initialization", "prey_means_SI", "vector_d", context__.to_vec(n_preys,isos));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prey_means_SI(n_preys, Eigen::Matrix<double, Eigen::Dynamic, 1>(isos));
        size_t prey_means_SI_j_1_max__ = isos;
        size_t prey_means_SI_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < prey_means_SI_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prey_means_SI_k_0_max__; ++k_0__) {
                prey_means_SI[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t prey_means_SI_i_0_max__ = n_preys;
        for (size_t i_0__ = 0; i_0__ < prey_means_SI_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(prey_means_SI[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable prey_means_SI: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 15;
        if (!(context__.contains_r("cc")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable cc missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("cc");
        pos__ = 0U;
        validate_non_negative_index("cc", "isos", isos);
        validate_non_negative_index("cc", "n_preys", n_preys);
        context__.validate_dims("parameter initialization", "cc", "vector_d", context__.to_vec(n_preys,isos));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > cc(n_preys, Eigen::Matrix<double, Eigen::Dynamic, 1>(isos));
        size_t cc_j_1_max__ = isos;
        size_t cc_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < cc_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cc_k_0_max__; ++k_0__) {
                cc[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t cc_i_0_max__ = n_preys;
        for (size_t i_0__ = 0; i_0__ < cc_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(cc[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable cc: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 16;
        if (!(context__.contains_r("cons_prey_SI")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable cons_prey_SI missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("cons_prey_SI");
        pos__ = 0U;
        validate_non_negative_index("cons_prey_SI", "isos", isos);
        validate_non_negative_index("cons_prey_SI", "n_preys", n_preys);
        context__.validate_dims("parameter initialization", "cons_prey_SI", "vector_d", context__.to_vec(n_preys,isos));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > cons_prey_SI(n_preys, Eigen::Matrix<double, Eigen::Dynamic, 1>(isos));
        size_t cons_prey_SI_j_1_max__ = isos;
        size_t cons_prey_SI_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < cons_prey_SI_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cons_prey_SI_k_0_max__; ++k_0__) {
                cons_prey_SI[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t cons_prey_SI_i_0_max__ = n_preys;
        for (size_t i_0__ = 0; i_0__ < cons_prey_SI_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(cons_prey_SI[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable cons_prey_SI: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 18;
        if (!(context__.contains_r("corr_prey")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable corr_prey missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("corr_prey");
        pos__ = 0U;
        validate_non_negative_index("corr_prey", "isos", isos);
        validate_non_negative_index("corr_prey", "isos", isos);
        validate_non_negative_index("corr_prey", "n_preys", n_preys);
        context__.validate_dims("parameter initialization", "corr_prey", "matrix_d", context__.to_vec(n_preys,isos,isos));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > corr_prey(n_preys, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(isos, isos));
        size_t corr_prey_j_2_max__ = isos;
        size_t corr_prey_j_1_max__ = isos;
        size_t corr_prey_k_0_max__ = n_preys;
        for (size_t j_2__ = 0; j_2__ < corr_prey_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_prey_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < corr_prey_k_0_max__; ++k_0__) {
                    corr_prey[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                }
            }
        }
        size_t corr_prey_i_0_max__ = n_preys;
        for (size_t i_0__ = 0; i_0__ < corr_prey_i_0_max__; ++i_0__) {
            try {
                writer__.cholesky_factor_corr_unconstrain(corr_prey[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable corr_prey: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 19;
        if (!(context__.contains_r("corr_pred")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable corr_pred missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("corr_pred");
        pos__ = 0U;
        validate_non_negative_index("corr_pred", "isos", isos);
        validate_non_negative_index("corr_pred", "isos", isos);
        context__.validate_dims("parameter initialization", "corr_pred", "matrix_d", context__.to_vec(isos,isos));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> corr_pred(isos, isos);
        size_t corr_pred_j_2_max__ = isos;
        size_t corr_pred_j_1_max__ = isos;
        for (size_t j_2__ = 0; j_2__ < corr_pred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_pred_j_1_max__; ++j_1__) {
                corr_pred(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(corr_pred);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable corr_pred: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 20;
        if (!(context__.contains_r("corr_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable corr_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("corr_mean");
        pos__ = 0U;
        validate_non_negative_index("corr_mean", "isos", isos);
        validate_non_negative_index("corr_mean", "isos", isos);
        context__.validate_dims("parameter initialization", "corr_mean", "matrix_d", context__.to_vec(isos,isos));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> corr_mean(isos, isos);
        size_t corr_mean_j_2_max__ = isos;
        size_t corr_mean_j_1_max__ = isos;
        for (size_t j_2__ = 0; j_2__ < corr_mean_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_mean_j_1_max__; ++j_1__) {
                corr_mean(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(corr_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable corr_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 21;
        if (!(context__.contains_r("tau_prey")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_prey missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_prey");
        pos__ = 0U;
        validate_non_negative_index("tau_prey", "isos", isos);
        validate_non_negative_index("tau_prey", "n_preys", n_preys);
        context__.validate_dims("parameter initialization", "tau_prey", "vector_d", context__.to_vec(n_preys,isos));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > tau_prey(n_preys, Eigen::Matrix<double, Eigen::Dynamic, 1>(isos));
        size_t tau_prey_j_1_max__ = isos;
        size_t tau_prey_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < tau_prey_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < tau_prey_k_0_max__; ++k_0__) {
                tau_prey[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t tau_prey_i_0_max__ = n_preys;
        for (size_t i_0__ = 0; i_0__ < tau_prey_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lb_unconstrain(0, tau_prey[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_prey: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 22;
        if (!(context__.contains_r("tau_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_mean");
        pos__ = 0U;
        validate_non_negative_index("tau_mean", "isos", isos);
        context__.validate_dims("parameter initialization", "tau_mean", "vector_d", context__.to_vec(isos));
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau_mean(isos);
        size_t tau_mean_j_1_max__ = isos;
        for (size_t j_1__ = 0; j_1__ < tau_mean_j_1_max__; ++j_1__) {
            tau_mean(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, tau_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 23;
        if (!(context__.contains_r("tau_pred")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_pred missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_pred");
        pos__ = 0U;
        validate_non_negative_index("tau_pred", "isos", isos);
        context__.validate_dims("parameter initialization", "tau_pred", "vector_d", context__.to_vec(isos));
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau_pred(isos);
        size_t tau_pred_j_1_max__ = isos;
        for (size_t j_1__ = 0; j_1__ < tau_pred_j_1_max__; ++j_1__) {
            tau_pred(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, tau_pred);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_pred: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 24;
        if (!(context__.contains_r("props")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable props missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("props");
        pos__ = 0U;
        validate_non_negative_index("props", "n_preys", n_preys);
        context__.validate_dims("parameter initialization", "props", "double", context__.to_vec(n_preys));
        std::vector<double> props(n_preys, double(0));
        size_t props_k_0_max__ = n_preys;
        for (size_t k_0__ = 0; k_0__ < props_k_0_max__; ++k_0__) {
            props[k_0__] = vals_r__[pos__++];
        }
        size_t props_i_0_max__ = n_preys;
        for (size_t i_0__ = 0; i_0__ < props_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, props[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable props: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 14;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > prey_means_SI;
            size_t prey_means_SI_d_0_max__ = n_preys;
            prey_means_SI.reserve(prey_means_SI_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < prey_means_SI_d_0_max__; ++d_0__) {
                if (jacobian__)
                    prey_means_SI.push_back(in__.vector_constrain(isos, lp__));
                else
                    prey_means_SI.push_back(in__.vector_constrain(isos));
            }

            current_statement_begin__ = 15;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > cc;
            size_t cc_d_0_max__ = n_preys;
            cc.reserve(cc_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < cc_d_0_max__; ++d_0__) {
                if (jacobian__)
                    cc.push_back(in__.vector_constrain(isos, lp__));
                else
                    cc.push_back(in__.vector_constrain(isos));
            }

            current_statement_begin__ = 16;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > cons_prey_SI;
            size_t cons_prey_SI_d_0_max__ = n_preys;
            cons_prey_SI.reserve(cons_prey_SI_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < cons_prey_SI_d_0_max__; ++d_0__) {
                if (jacobian__)
                    cons_prey_SI.push_back(in__.vector_constrain(isos, lp__));
                else
                    cons_prey_SI.push_back(in__.vector_constrain(isos));
            }

            current_statement_begin__ = 18;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > corr_prey;
            size_t corr_prey_d_0_max__ = n_preys;
            corr_prey.reserve(corr_prey_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < corr_prey_d_0_max__; ++d_0__) {
                if (jacobian__)
                    corr_prey.push_back(in__.cholesky_factor_corr_constrain(isos, lp__));
                else
                    corr_prey.push_back(in__.cholesky_factor_corr_constrain(isos));
            }

            current_statement_begin__ = 19;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> corr_pred;
            (void) corr_pred;  // dummy to suppress unused var warning
            if (jacobian__)
                corr_pred = in__.cholesky_factor_corr_constrain(isos, lp__);
            else
                corr_pred = in__.cholesky_factor_corr_constrain(isos);

            current_statement_begin__ = 20;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> corr_mean;
            (void) corr_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                corr_mean = in__.cholesky_factor_corr_constrain(isos, lp__);
            else
                corr_mean = in__.cholesky_factor_corr_constrain(isos);

            current_statement_begin__ = 21;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > tau_prey;
            size_t tau_prey_d_0_max__ = n_preys;
            tau_prey.reserve(tau_prey_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < tau_prey_d_0_max__; ++d_0__) {
                if (jacobian__)
                    tau_prey.push_back(in__.vector_lb_constrain(0, isos, lp__));
                else
                    tau_prey.push_back(in__.vector_lb_constrain(0, isos));
            }

            current_statement_begin__ = 22;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau_mean;
            (void) tau_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_mean = in__.vector_lb_constrain(0, isos, lp__);
            else
                tau_mean = in__.vector_lb_constrain(0, isos);

            current_statement_begin__ = 23;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau_pred;
            (void) tau_pred;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_pred = in__.vector_lb_constrain(0, isos, lp__);
            else
                tau_pred = in__.vector_lb_constrain(0, isos);

            current_statement_begin__ = 24;
            std::vector<local_scalar_t__> props;
            size_t props_d_0_max__ = n_preys;
            props.reserve(props_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < props_d_0_max__; ++d_0__) {
                if (jacobian__)
                    props.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    props.push_back(in__.scalar_lb_constrain(0));
            }

            // transformed parameters
            current_statement_begin__ = 27;
            validate_non_negative_index("prey_precs_SI", "isos", isos);
            validate_non_negative_index("prey_precs_SI", "isos", isos);
            validate_non_negative_index("prey_precs_SI", "n_preys", n_preys);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > prey_precs_SI(n_preys, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(isos, isos));
            stan::math::initialize(prey_precs_SI, DUMMY_VAR__);
            stan::math::fill(prey_precs_SI, DUMMY_VAR__);

            current_statement_begin__ = 28;
            validate_non_negative_index("pred_prec_SI", "isos", isos);
            validate_non_negative_index("pred_prec_SI", "isos", isos);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> pred_prec_SI(isos, isos);
            stan::math::initialize(pred_prec_SI, DUMMY_VAR__);
            stan::math::fill(pred_prec_SI, DUMMY_VAR__);

            current_statement_begin__ = 29;
            validate_non_negative_index("prop", "n_preys", n_preys);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> prop(n_preys);
            stan::math::initialize(prop, DUMMY_VAR__);
            stan::math::fill(prop, DUMMY_VAR__);

            current_statement_begin__ = 30;
            validate_non_negative_index("prey_SI", "isos", isos);
            validate_non_negative_index("prey_SI", "n_preys", n_preys);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> prey_SI(isos, n_preys);
            stan::math::initialize(prey_SI, DUMMY_VAR__);
            stan::math::fill(prey_SI, DUMMY_VAR__);

            current_statement_begin__ = 31;
            validate_non_negative_index("mu_SI", "isos", isos);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu_SI(isos);
            stan::math::initialize(mu_SI, DUMMY_VAR__);
            stan::math::fill(mu_SI, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 33;
            for (int j = 1; j <= n_preys; ++j) {

                current_statement_begin__ = 34;
                stan::model::assign(prop, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(props, j, "props", 1) / sum(stan::model::rvalue(props, stan::model::cons_list(stan::model::index_min_max(1, n_preys), stan::model::nil_index_list()), "props"))), 
                            "assigning variable prop");
                current_statement_begin__ = 35;
                stan::model::assign(prey_precs_SI, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            diag_pre_multiply(get_base1(tau_prey, j, "tau_prey", 1), get_base1(corr_prey, j, "corr_prey", 1)), 
                            "assigning variable prey_precs_SI");
                current_statement_begin__ = 36;
                stan::model::assign(prey_SI, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            add(get_base1(cc, j, "cc", 1), get_base1(cons_prey_SI, j, "cons_prey_SI", 1)), 
                            "assigning variable prey_SI");
            }
            current_statement_begin__ = 40;
            stan::math::assign(mu_SI, multiply(prey_SI, prop));
            current_statement_begin__ = 42;
            stan::math::assign(pred_prec_SI, diag_pre_multiply(tau_pred, corr_pred));

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 27;
            size_t prey_precs_SI_k_0_max__ = n_preys;
            size_t prey_precs_SI_j_1_max__ = isos;
            size_t prey_precs_SI_j_2_max__ = isos;
            for (size_t k_0__ = 0; k_0__ < prey_precs_SI_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < prey_precs_SI_j_1_max__; ++j_1__) {
                    for (size_t j_2__ = 0; j_2__ < prey_precs_SI_j_2_max__; ++j_2__) {
                        if (stan::math::is_uninitialized(prey_precs_SI[k_0__](j_1__, j_2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: prey_precs_SI" << "[" << k_0__ << "]" << "(" << j_1__ << ", " << j_2__ << ")";
                            stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable prey_precs_SI: ") + msg__.str()), current_statement_begin__, prog_reader__());
                        }
                    }
                }
            }
            current_statement_begin__ = 28;
            size_t pred_prec_SI_j_1_max__ = isos;
            size_t pred_prec_SI_j_2_max__ = isos;
            for (size_t j_1__ = 0; j_1__ < pred_prec_SI_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < pred_prec_SI_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(pred_prec_SI(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: pred_prec_SI" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable pred_prec_SI: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 29;
            size_t prop_j_1_max__ = n_preys;
            for (size_t j_1__ = 0; j_1__ < prop_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(prop(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: prop" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable prop: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 30;
            size_t prey_SI_j_1_max__ = isos;
            size_t prey_SI_j_2_max__ = n_preys;
            for (size_t j_1__ = 0; j_1__ < prey_SI_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < prey_SI_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(prey_SI(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: prey_SI" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable prey_SI: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 31;
            size_t mu_SI_j_1_max__ = isos;
            for (size_t j_1__ = 0; j_1__ < mu_SI_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu_SI(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_SI" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_SI: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body

            current_statement_begin__ = 48;
            for (int ps = 1; ps <= n_prey_samps_SI; ++ps) {
                current_statement_begin__ = 48;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(preys_SI, ps, "preys_SI", 1), get_base1(prey_means_SI, get_base1(prey_ix_SI, ps, "prey_ix_SI", 1), "prey_means_SI", 1), get_base1(prey_precs_SI, get_base1(prey_ix_SI, ps, "prey_ix_SI", 1), "prey_precs_SI", 1)));
            }
            current_statement_begin__ = 52;
            for (int p = 1; p <= n_preds; ++p) {
                current_statement_begin__ = 52;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(preds_SI, p, "preds_SI", 1), mu_SI, pred_prec_SI));
            }
            current_statement_begin__ = 54;
            lp_accum__.add(gamma_log<propto__>(props, 1.5, 1));
            current_statement_begin__ = 56;
            for (int j = 1; j <= n_preys; ++j) {

                current_statement_begin__ = 58;
                lp_accum__.add(normal_log<propto__>(get_base1(tau_prey, j, "tau_prey", 1), 0, 10));
                current_statement_begin__ = 59;
                lp_accum__.add(lkj_corr_cholesky_log<propto__>(get_base1(corr_prey, j, "corr_prey", 1), 3));
                current_statement_begin__ = 61;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(prey_means_SI, j, "prey_means_SI", 1), get_base1(preym_SI, j, "preym_SI", 1), diag_pre_multiply(tau_mean, corr_mean)));
                current_statement_begin__ = 62;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(cons_prey_SI, j, "cons_prey_SI", 1), get_base1(prey_means_SI, j, "prey_means_SI", 1), get_base1(prey_precs_SI, j, "prey_precs_SI", 1)));
                current_statement_begin__ = 65;
                lp_accum__.add(normal_log<propto__>(get_base1(cc, j, "cc", 1), get_base1(mean_cs, j, "mean_cs", 1), get_base1(sigma_cs, j, "sigma_cs", 1)));
            }
            current_statement_begin__ = 74;
            lp_accum__.add(normal_log<propto__>(tau_pred, 0, 10));
            current_statement_begin__ = 75;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(corr_pred, 3));
            current_statement_begin__ = 77;
            lp_accum__.add(normal_log<propto__>(tau_mean, 0, 10));
            current_statement_begin__ = 78;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(corr_mean, 3));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("prey_means_SI");
        names__.push_back("cc");
        names__.push_back("cons_prey_SI");
        names__.push_back("corr_prey");
        names__.push_back("corr_pred");
        names__.push_back("corr_mean");
        names__.push_back("tau_prey");
        names__.push_back("tau_mean");
        names__.push_back("tau_pred");
        names__.push_back("props");
        names__.push_back("prey_precs_SI");
        names__.push_back("pred_prec_SI");
        names__.push_back("prop");
        names__.push_back("prey_SI");
        names__.push_back("mu_SI");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(isos);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(isos);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(isos);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(isos);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(isos);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(isos);
        dims__.push_back(n_preys);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(isos);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_Pop_prop_analysis_SI_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prey_means_SI;
        size_t prey_means_SI_d_0_max__ = n_preys;
        prey_means_SI.reserve(prey_means_SI_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < prey_means_SI_d_0_max__; ++d_0__) {
            prey_means_SI.push_back(in__.vector_constrain(isos));
        }
        size_t prey_means_SI_j_1_max__ = isos;
        size_t prey_means_SI_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < prey_means_SI_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prey_means_SI_k_0_max__; ++k_0__) {
                vars__.push_back(prey_means_SI[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > cc;
        size_t cc_d_0_max__ = n_preys;
        cc.reserve(cc_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < cc_d_0_max__; ++d_0__) {
            cc.push_back(in__.vector_constrain(isos));
        }
        size_t cc_j_1_max__ = isos;
        size_t cc_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < cc_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cc_k_0_max__; ++k_0__) {
                vars__.push_back(cc[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > cons_prey_SI;
        size_t cons_prey_SI_d_0_max__ = n_preys;
        cons_prey_SI.reserve(cons_prey_SI_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < cons_prey_SI_d_0_max__; ++d_0__) {
            cons_prey_SI.push_back(in__.vector_constrain(isos));
        }
        size_t cons_prey_SI_j_1_max__ = isos;
        size_t cons_prey_SI_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < cons_prey_SI_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cons_prey_SI_k_0_max__; ++k_0__) {
                vars__.push_back(cons_prey_SI[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > corr_prey;
        size_t corr_prey_d_0_max__ = n_preys;
        corr_prey.reserve(corr_prey_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < corr_prey_d_0_max__; ++d_0__) {
            corr_prey.push_back(in__.cholesky_factor_corr_constrain(isos));
        }
        size_t corr_prey_j_2_max__ = isos;
        size_t corr_prey_j_1_max__ = isos;
        size_t corr_prey_k_0_max__ = n_preys;
        for (size_t j_2__ = 0; j_2__ < corr_prey_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_prey_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < corr_prey_k_0_max__; ++k_0__) {
                    vars__.push_back(corr_prey[k_0__](j_1__, j_2__));
                }
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> corr_pred = in__.cholesky_factor_corr_constrain(isos);
        size_t corr_pred_j_2_max__ = isos;
        size_t corr_pred_j_1_max__ = isos;
        for (size_t j_2__ = 0; j_2__ < corr_pred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_pred_j_1_max__; ++j_1__) {
                vars__.push_back(corr_pred(j_1__, j_2__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> corr_mean = in__.cholesky_factor_corr_constrain(isos);
        size_t corr_mean_j_2_max__ = isos;
        size_t corr_mean_j_1_max__ = isos;
        for (size_t j_2__ = 0; j_2__ < corr_mean_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_mean_j_1_max__; ++j_1__) {
                vars__.push_back(corr_mean(j_1__, j_2__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > tau_prey;
        size_t tau_prey_d_0_max__ = n_preys;
        tau_prey.reserve(tau_prey_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < tau_prey_d_0_max__; ++d_0__) {
            tau_prey.push_back(in__.vector_lb_constrain(0, isos));
        }
        size_t tau_prey_j_1_max__ = isos;
        size_t tau_prey_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < tau_prey_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < tau_prey_k_0_max__; ++k_0__) {
                vars__.push_back(tau_prey[k_0__](j_1__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> tau_mean = in__.vector_lb_constrain(0, isos);
        size_t tau_mean_j_1_max__ = isos;
        for (size_t j_1__ = 0; j_1__ < tau_mean_j_1_max__; ++j_1__) {
            vars__.push_back(tau_mean(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> tau_pred = in__.vector_lb_constrain(0, isos);
        size_t tau_pred_j_1_max__ = isos;
        for (size_t j_1__ = 0; j_1__ < tau_pred_j_1_max__; ++j_1__) {
            vars__.push_back(tau_pred(j_1__));
        }

        std::vector<double> props;
        size_t props_d_0_max__ = n_preys;
        props.reserve(props_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < props_d_0_max__; ++d_0__) {
            props.push_back(in__.scalar_lb_constrain(0));
        }
        size_t props_k_0_max__ = n_preys;
        for (size_t k_0__ = 0; k_0__ < props_k_0_max__; ++k_0__) {
            vars__.push_back(props[k_0__]);
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 27;
            validate_non_negative_index("prey_precs_SI", "isos", isos);
            validate_non_negative_index("prey_precs_SI", "isos", isos);
            validate_non_negative_index("prey_precs_SI", "n_preys", n_preys);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > prey_precs_SI(n_preys, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(isos, isos));
            stan::math::initialize(prey_precs_SI, DUMMY_VAR__);
            stan::math::fill(prey_precs_SI, DUMMY_VAR__);

            current_statement_begin__ = 28;
            validate_non_negative_index("pred_prec_SI", "isos", isos);
            validate_non_negative_index("pred_prec_SI", "isos", isos);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> pred_prec_SI(isos, isos);
            stan::math::initialize(pred_prec_SI, DUMMY_VAR__);
            stan::math::fill(pred_prec_SI, DUMMY_VAR__);

            current_statement_begin__ = 29;
            validate_non_negative_index("prop", "n_preys", n_preys);
            Eigen::Matrix<double, Eigen::Dynamic, 1> prop(n_preys);
            stan::math::initialize(prop, DUMMY_VAR__);
            stan::math::fill(prop, DUMMY_VAR__);

            current_statement_begin__ = 30;
            validate_non_negative_index("prey_SI", "isos", isos);
            validate_non_negative_index("prey_SI", "n_preys", n_preys);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> prey_SI(isos, n_preys);
            stan::math::initialize(prey_SI, DUMMY_VAR__);
            stan::math::fill(prey_SI, DUMMY_VAR__);

            current_statement_begin__ = 31;
            validate_non_negative_index("mu_SI", "isos", isos);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_SI(isos);
            stan::math::initialize(mu_SI, DUMMY_VAR__);
            stan::math::fill(mu_SI, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 33;
            for (int j = 1; j <= n_preys; ++j) {

                current_statement_begin__ = 34;
                stan::model::assign(prop, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(props, j, "props", 1) / sum(stan::model::rvalue(props, stan::model::cons_list(stan::model::index_min_max(1, n_preys), stan::model::nil_index_list()), "props"))), 
                            "assigning variable prop");
                current_statement_begin__ = 35;
                stan::model::assign(prey_precs_SI, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            diag_pre_multiply(get_base1(tau_prey, j, "tau_prey", 1), get_base1(corr_prey, j, "corr_prey", 1)), 
                            "assigning variable prey_precs_SI");
                current_statement_begin__ = 36;
                stan::model::assign(prey_SI, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            add(get_base1(cc, j, "cc", 1), get_base1(cons_prey_SI, j, "cons_prey_SI", 1)), 
                            "assigning variable prey_SI");
            }
            current_statement_begin__ = 40;
            stan::math::assign(mu_SI, multiply(prey_SI, prop));
            current_statement_begin__ = 42;
            stan::math::assign(pred_prec_SI, diag_pre_multiply(tau_pred, corr_pred));

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t prey_precs_SI_j_2_max__ = isos;
                size_t prey_precs_SI_j_1_max__ = isos;
                size_t prey_precs_SI_k_0_max__ = n_preys;
                for (size_t j_2__ = 0; j_2__ < prey_precs_SI_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < prey_precs_SI_j_1_max__; ++j_1__) {
                        for (size_t k_0__ = 0; k_0__ < prey_precs_SI_k_0_max__; ++k_0__) {
                            vars__.push_back(prey_precs_SI[k_0__](j_1__, j_2__));
                        }
                    }
                }
                size_t pred_prec_SI_j_2_max__ = isos;
                size_t pred_prec_SI_j_1_max__ = isos;
                for (size_t j_2__ = 0; j_2__ < pred_prec_SI_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < pred_prec_SI_j_1_max__; ++j_1__) {
                        vars__.push_back(pred_prec_SI(j_1__, j_2__));
                    }
                }
                size_t prop_j_1_max__ = n_preys;
                for (size_t j_1__ = 0; j_1__ < prop_j_1_max__; ++j_1__) {
                    vars__.push_back(prop(j_1__));
                }
                size_t prey_SI_j_2_max__ = n_preys;
                size_t prey_SI_j_1_max__ = isos;
                for (size_t j_2__ = 0; j_2__ < prey_SI_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < prey_SI_j_1_max__; ++j_1__) {
                        vars__.push_back(prey_SI(j_1__, j_2__));
                    }
                }
                size_t mu_SI_j_1_max__ = isos;
                for (size_t j_1__ = 0; j_1__ < mu_SI_j_1_max__; ++j_1__) {
                    vars__.push_back(mu_SI(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "model_Pop_prop_analysis_SI";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t prey_means_SI_j_1_max__ = isos;
        size_t prey_means_SI_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < prey_means_SI_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prey_means_SI_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prey_means_SI" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t cc_j_1_max__ = isos;
        size_t cc_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < cc_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cc_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cc" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t cons_prey_SI_j_1_max__ = isos;
        size_t cons_prey_SI_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < cons_prey_SI_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cons_prey_SI_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cons_prey_SI" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t corr_prey_j_2_max__ = isos;
        size_t corr_prey_j_1_max__ = isos;
        size_t corr_prey_k_0_max__ = n_preys;
        for (size_t j_2__ = 0; j_2__ < corr_prey_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_prey_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < corr_prey_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "corr_prey" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t corr_pred_j_2_max__ = isos;
        size_t corr_pred_j_1_max__ = isos;
        for (size_t j_2__ = 0; j_2__ < corr_pred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr_pred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t corr_mean_j_2_max__ = isos;
        size_t corr_mean_j_1_max__ = isos;
        for (size_t j_2__ = 0; j_2__ < corr_mean_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_mean_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr_mean" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t tau_prey_j_1_max__ = isos;
        size_t tau_prey_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < tau_prey_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < tau_prey_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau_prey" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t tau_mean_j_1_max__ = isos;
        for (size_t j_1__ = 0; j_1__ < tau_mean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_mean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tau_pred_j_1_max__ = isos;
        for (size_t j_1__ = 0; j_1__ < tau_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t props_k_0_max__ = n_preys;
        for (size_t k_0__ = 0; k_0__ < props_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "props" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t prey_precs_SI_j_2_max__ = isos;
            size_t prey_precs_SI_j_1_max__ = isos;
            size_t prey_precs_SI_k_0_max__ = n_preys;
            for (size_t j_2__ = 0; j_2__ < prey_precs_SI_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prey_precs_SI_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < prey_precs_SI_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "prey_precs_SI" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            size_t pred_prec_SI_j_2_max__ = isos;
            size_t pred_prec_SI_j_1_max__ = isos;
            for (size_t j_2__ = 0; j_2__ < pred_prec_SI_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < pred_prec_SI_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pred_prec_SI" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t prop_j_1_max__ = n_preys;
            for (size_t j_1__ = 0; j_1__ < prop_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t prey_SI_j_2_max__ = n_preys;
            size_t prey_SI_j_1_max__ = isos;
            for (size_t j_2__ = 0; j_2__ < prey_SI_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prey_SI_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prey_SI" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t mu_SI_j_1_max__ = isos;
            for (size_t j_1__ = 0; j_1__ < mu_SI_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_SI" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t prey_means_SI_j_1_max__ = isos;
        size_t prey_means_SI_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < prey_means_SI_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prey_means_SI_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prey_means_SI" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t cc_j_1_max__ = isos;
        size_t cc_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < cc_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cc_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cc" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t cons_prey_SI_j_1_max__ = isos;
        size_t cons_prey_SI_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < cons_prey_SI_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cons_prey_SI_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cons_prey_SI" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t corr_prey_j_1_max__ = ((isos * (isos - 1)) / 2);
        size_t corr_prey_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < corr_prey_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < corr_prey_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr_prey" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t corr_pred_j_1_max__ = ((isos * (isos - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < corr_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "corr_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t corr_mean_j_1_max__ = ((isos * (isos - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < corr_mean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "corr_mean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tau_prey_j_1_max__ = isos;
        size_t tau_prey_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < tau_prey_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < tau_prey_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau_prey" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t tau_mean_j_1_max__ = isos;
        for (size_t j_1__ = 0; j_1__ < tau_mean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_mean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tau_pred_j_1_max__ = isos;
        for (size_t j_1__ = 0; j_1__ < tau_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t props_k_0_max__ = n_preys;
        for (size_t k_0__ = 0; k_0__ < props_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "props" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t prey_precs_SI_j_2_max__ = isos;
            size_t prey_precs_SI_j_1_max__ = isos;
            size_t prey_precs_SI_k_0_max__ = n_preys;
            for (size_t j_2__ = 0; j_2__ < prey_precs_SI_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prey_precs_SI_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < prey_precs_SI_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "prey_precs_SI" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            size_t pred_prec_SI_j_2_max__ = isos;
            size_t pred_prec_SI_j_1_max__ = isos;
            for (size_t j_2__ = 0; j_2__ < pred_prec_SI_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < pred_prec_SI_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pred_prec_SI" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t prop_j_1_max__ = n_preys;
            for (size_t j_1__ = 0; j_1__ < prop_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t prey_SI_j_2_max__ = n_preys;
            size_t prey_SI_j_1_max__ = isos;
            for (size_t j_2__ = 0; j_2__ < prey_SI_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prey_SI_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prey_SI" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t mu_SI_j_1_max__ = isos;
            for (size_t j_1__ = 0; j_1__ < mu_SI_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_SI" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef model_Pop_prop_analysis_SI_namespace::model_Pop_prop_analysis_SI stan_model;

#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


#endif
