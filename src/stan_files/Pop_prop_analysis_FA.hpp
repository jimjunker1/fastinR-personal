#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0

#include <stan/model/model_header.hpp>

namespace model_Pop_prop_analysis_FA_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_Pop_prop_analysis_FA");
    reader.add_event(120, 118, "end", "model_Pop_prop_analysis_FA");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
clo(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& pp, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 4;
        return stan::math::promote_scalar<fun_return_scalar_t__>(divide(pp, sum(pp)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct clo_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& pp, std::ostream* pstream__) const {
        return clo(pp, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
alr(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& pp,
        const int& dim, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 7;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::log(divide(stan::model::rvalue(pp, stan::model::cons_list(stan::model::index_min_max(1, (dim - 1)), stan::model::nil_index_list()), "pp"), get_base1(pp, dim, "pp", 1))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct alr_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& pp,
        const int& dim, std::ostream* pstream__) const {
        return alr(pp, dim, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
inv_alr(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& pp,
            const int& dim, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 10;
        validate_non_negative_index("ppo", "dim", dim);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ppo(dim);
        stan::math::initialize(ppo, DUMMY_VAR__);
        stan::math::fill(ppo, DUMMY_VAR__);


        current_statement_begin__ = 12;
        stan::model::assign(ppo, 
                    stan::model::cons_list(stan::model::index_min_max(1, (dim - 1)), stan::model::nil_index_list()), 
                    stan::math::exp(pp), 
                    "assigning variable ppo");
        current_statement_begin__ = 13;
        stan::model::assign(ppo, 
                    stan::model::cons_list(stan::model::index_uni(dim), stan::model::nil_index_list()), 
                    1, 
                    "assigning variable ppo");
        current_statement_begin__ = 14;
        return stan::math::promote_scalar<fun_return_scalar_t__>(clo(ppo, pstream__));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct inv_alr_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& pp,
            const int& dim, std::ostream* pstream__) const {
        return inv_alr(pp, dim, pstream__);
    }
};

#include <meta_header.hpp>
 class model_Pop_prop_analysis_FA
  : public stan::model::model_base_crtp<model_Pop_prop_analysis_FA> {
private:
        int n_prey_samps;
        int n_preys;
        int n_preds;
        int n_fats;
        int m_fats;
        std::vector<int> prey_ix;
        int fc_data;
        vector_d fc_mean;
        vector_d fc_tau;
        std::vector<vector_d> preys;
        std::vector<vector_d> preym;
        std::vector<vector_d> mean_c;
        std::vector<vector_d> tau_coeffs;
        std::vector<vector_d> preds;
        std::vector<double> fc_base;
public:
    model_Pop_prop_analysis_FA(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_Pop_prop_analysis_FA(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_Pop_prop_analysis_FA_namespace::model_Pop_prop_analysis_FA";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "n_prey_samps", "int", context__.to_vec());
            n_prey_samps = int(0);
            vals_i__ = context__.vals_i("n_prey_samps");
            pos__ = 0;
            n_prey_samps = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_prey_samps", n_prey_samps, 1);

            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "n_preys", "int", context__.to_vec());
            n_preys = int(0);
            vals_i__ = context__.vals_i("n_preys");
            pos__ = 0;
            n_preys = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_preys", n_preys, 1);

            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "n_preds", "int", context__.to_vec());
            n_preds = int(0);
            vals_i__ = context__.vals_i("n_preds");
            pos__ = 0;
            n_preds = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_preds", n_preds, 1);

            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "n_fats", "int", context__.to_vec());
            n_fats = int(0);
            vals_i__ = context__.vals_i("n_fats");
            pos__ = 0;
            n_fats = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_fats", n_fats, 1);

            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "m_fats", "int", context__.to_vec());
            m_fats = int(0);
            vals_i__ = context__.vals_i("m_fats");
            pos__ = 0;
            m_fats = vals_i__[pos__++];
            check_greater_or_equal(function__, "m_fats", m_fats, 1);

            current_statement_begin__ = 24;
            validate_non_negative_index("prey_ix", "n_prey_samps", n_prey_samps);
            context__.validate_dims("data initialization", "prey_ix", "int", context__.to_vec(n_prey_samps));
            prey_ix = std::vector<int>(n_prey_samps, int(0));
            vals_i__ = context__.vals_i("prey_ix");
            pos__ = 0;
            size_t prey_ix_k_0_max__ = n_prey_samps;
            for (size_t k_0__ = 0; k_0__ < prey_ix_k_0_max__; ++k_0__) {
                prey_ix[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "fc_data", "int", context__.to_vec());
            fc_data = int(0);
            vals_i__ = context__.vals_i("fc_data");
            pos__ = 0;
            fc_data = vals_i__[pos__++];
            check_greater_or_equal(function__, "fc_data", fc_data, 0);
            check_less_or_equal(function__, "fc_data", fc_data, 1);

            current_statement_begin__ = 27;
            validate_non_negative_index("fc_mean", "n_preys", n_preys);
            context__.validate_dims("data initialization", "fc_mean", "vector_d", context__.to_vec(n_preys));
            fc_mean = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_preys);
            vals_r__ = context__.vals_r("fc_mean");
            pos__ = 0;
            size_t fc_mean_j_1_max__ = n_preys;
            for (size_t j_1__ = 0; j_1__ < fc_mean_j_1_max__; ++j_1__) {
                fc_mean(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 28;
            validate_non_negative_index("fc_tau", "n_preys", n_preys);
            context__.validate_dims("data initialization", "fc_tau", "vector_d", context__.to_vec(n_preys));
            fc_tau = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_preys);
            vals_r__ = context__.vals_r("fc_tau");
            pos__ = 0;
            size_t fc_tau_j_1_max__ = n_preys;
            for (size_t j_1__ = 0; j_1__ < fc_tau_j_1_max__; ++j_1__) {
                fc_tau(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 29;
            validate_non_negative_index("preys", "m_fats", m_fats);
            validate_non_negative_index("preys", "n_prey_samps", n_prey_samps);
            context__.validate_dims("data initialization", "preys", "vector_d", context__.to_vec(n_prey_samps,m_fats));
            preys = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(n_prey_samps, Eigen::Matrix<double, Eigen::Dynamic, 1>(m_fats));
            vals_r__ = context__.vals_r("preys");
            pos__ = 0;
            size_t preys_j_1_max__ = m_fats;
            size_t preys_k_0_max__ = n_prey_samps;
            for (size_t j_1__ = 0; j_1__ < preys_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < preys_k_0_max__; ++k_0__) {
                    preys[k_0__](j_1__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 30;
            validate_non_negative_index("preym", "m_fats", m_fats);
            validate_non_negative_index("preym", "n_preys", n_preys);
            context__.validate_dims("data initialization", "preym", "vector_d", context__.to_vec(n_preys,m_fats));
            preym = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(n_preys, Eigen::Matrix<double, Eigen::Dynamic, 1>(m_fats));
            vals_r__ = context__.vals_r("preym");
            pos__ = 0;
            size_t preym_j_1_max__ = m_fats;
            size_t preym_k_0_max__ = n_preys;
            for (size_t j_1__ = 0; j_1__ < preym_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < preym_k_0_max__; ++k_0__) {
                    preym[k_0__](j_1__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 31;
            validate_non_negative_index("mean_c", "n_fats", n_fats);
            validate_non_negative_index("mean_c", "n_preys", n_preys);
            context__.validate_dims("data initialization", "mean_c", "vector_d", context__.to_vec(n_preys,n_fats));
            mean_c = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(n_preys, Eigen::Matrix<double, Eigen::Dynamic, 1>(n_fats));
            vals_r__ = context__.vals_r("mean_c");
            pos__ = 0;
            size_t mean_c_j_1_max__ = n_fats;
            size_t mean_c_k_0_max__ = n_preys;
            for (size_t j_1__ = 0; j_1__ < mean_c_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < mean_c_k_0_max__; ++k_0__) {
                    mean_c[k_0__](j_1__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 32;
            validate_non_negative_index("tau_coeffs", "n_fats", n_fats);
            validate_non_negative_index("tau_coeffs", "n_preys", n_preys);
            context__.validate_dims("data initialization", "tau_coeffs", "vector_d", context__.to_vec(n_preys,n_fats));
            tau_coeffs = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(n_preys, Eigen::Matrix<double, Eigen::Dynamic, 1>(n_fats));
            vals_r__ = context__.vals_r("tau_coeffs");
            pos__ = 0;
            size_t tau_coeffs_j_1_max__ = n_fats;
            size_t tau_coeffs_k_0_max__ = n_preys;
            for (size_t j_1__ = 0; j_1__ < tau_coeffs_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < tau_coeffs_k_0_max__; ++k_0__) {
                    tau_coeffs[k_0__](j_1__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 33;
            validate_non_negative_index("preds", "m_fats", m_fats);
            validate_non_negative_index("preds", "n_preds", n_preds);
            context__.validate_dims("data initialization", "preds", "vector_d", context__.to_vec(n_preds,m_fats));
            preds = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(n_preds, Eigen::Matrix<double, Eigen::Dynamic, 1>(m_fats));
            vals_r__ = context__.vals_r("preds");
            pos__ = 0;
            size_t preds_j_1_max__ = m_fats;
            size_t preds_k_0_max__ = n_preds;
            for (size_t j_1__ = 0; j_1__ < preds_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < preds_k_0_max__; ++k_0__) {
                    preds[k_0__](j_1__) = vals_r__[pos__++];
                }
            }


            // initialize transformed data variables
            current_statement_begin__ = 36;
            validate_non_negative_index("fc_base", "n_preys", n_preys);
            fc_base = std::vector<double>(n_preys, double(0));
            stan::math::fill(fc_base, DUMMY_VAR__);

            // execute transformed data statements
            current_statement_begin__ = 38;
            for (int p = 1; p <= n_preys; ++p) {
                current_statement_begin__ = 38;
                stan::model::assign(fc_base, 
                            stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list()), 
                            1.0, 
                            "assigning variable fc_base");
            }

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 41;
            validate_non_negative_index("prey_means", "m_fats", m_fats);
            validate_non_negative_index("prey_means", "n_preys", n_preys);
            num_params_r__ += (m_fats * n_preys);
            current_statement_begin__ = 42;
            validate_non_negative_index("cs", "n_fats", n_fats);
            validate_non_negative_index("cs", "n_preys", n_preys);
            num_params_r__ += (n_fats * n_preys);
            current_statement_begin__ = 43;
            validate_non_negative_index("fcs", "(fc_data ? n_preys : 0 )", (fc_data ? n_preys : 0 ));
            num_params_r__ += (1 * (fc_data ? n_preys : 0 ));
            current_statement_begin__ = 44;
            validate_non_negative_index("cons_prey", "m_fats", m_fats);
            validate_non_negative_index("cons_prey", "n_preys", n_preys);
            num_params_r__ += (m_fats * n_preys);
            current_statement_begin__ = 46;
            validate_non_negative_index("corr_prey", "m_fats", m_fats);
            validate_non_negative_index("corr_prey", "m_fats", m_fats);
            validate_non_negative_index("corr_prey", "n_preys", n_preys);
            num_params_r__ += (((m_fats * (m_fats - 1)) / 2) * n_preys);
            current_statement_begin__ = 47;
            validate_non_negative_index("corr_pred", "m_fats", m_fats);
            validate_non_negative_index("corr_pred", "m_fats", m_fats);
            num_params_r__ += ((m_fats * (m_fats - 1)) / 2);
            current_statement_begin__ = 48;
            validate_non_negative_index("corr_mean", "m_fats", m_fats);
            validate_non_negative_index("corr_mean", "m_fats", m_fats);
            num_params_r__ += ((m_fats * (m_fats - 1)) / 2);
            current_statement_begin__ = 49;
            validate_non_negative_index("tau_prey", "m_fats", m_fats);
            validate_non_negative_index("tau_prey", "n_preys", n_preys);
            num_params_r__ += (m_fats * n_preys);
            current_statement_begin__ = 50;
            validate_non_negative_index("tau_mean", "m_fats", m_fats);
            num_params_r__ += m_fats;
            current_statement_begin__ = 51;
            validate_non_negative_index("tau_pred", "m_fats", m_fats);
            num_params_r__ += m_fats;
            current_statement_begin__ = 52;
            validate_non_negative_index("props", "n_preys", n_preys);
            num_params_r__ += n_preys;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_Pop_prop_analysis_FA() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 41;
        if (!(context__.contains_r("prey_means")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable prey_means missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("prey_means");
        pos__ = 0U;
        validate_non_negative_index("prey_means", "m_fats", m_fats);
        validate_non_negative_index("prey_means", "n_preys", n_preys);
        context__.validate_dims("parameter initialization", "prey_means", "vector_d", context__.to_vec(n_preys,m_fats));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prey_means(n_preys, Eigen::Matrix<double, Eigen::Dynamic, 1>(m_fats));
        size_t prey_means_j_1_max__ = m_fats;
        size_t prey_means_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < prey_means_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prey_means_k_0_max__; ++k_0__) {
                prey_means[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t prey_means_i_0_max__ = n_preys;
        for (size_t i_0__ = 0; i_0__ < prey_means_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(prey_means[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable prey_means: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 42;
        if (!(context__.contains_r("cs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable cs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("cs");
        pos__ = 0U;
        validate_non_negative_index("cs", "n_fats", n_fats);
        validate_non_negative_index("cs", "n_preys", n_preys);
        context__.validate_dims("parameter initialization", "cs", "vector_d", context__.to_vec(n_preys,n_fats));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > cs(n_preys, Eigen::Matrix<double, Eigen::Dynamic, 1>(n_fats));
        size_t cs_j_1_max__ = n_fats;
        size_t cs_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < cs_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cs_k_0_max__; ++k_0__) {
                cs[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t cs_i_0_max__ = n_preys;
        for (size_t i_0__ = 0; i_0__ < cs_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lb_unconstrain(0, cs[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable cs: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 43;
        if (!(context__.contains_r("fcs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable fcs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("fcs");
        pos__ = 0U;
        validate_non_negative_index("fcs", "(fc_data ? n_preys : 0 )", (fc_data ? n_preys : 0 ));
        context__.validate_dims("parameter initialization", "fcs", "double", context__.to_vec((fc_data ? n_preys : 0 )));
        std::vector<double> fcs((fc_data ? n_preys : 0 ), double(0));
        size_t fcs_k_0_max__ = (fc_data ? n_preys : 0 );
        for (size_t k_0__ = 0; k_0__ < fcs_k_0_max__; ++k_0__) {
            fcs[k_0__] = vals_r__[pos__++];
        }
        size_t fcs_i_0_max__ = (fc_data ? n_preys : 0 );
        for (size_t i_0__ = 0; i_0__ < fcs_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 10, fcs[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable fcs: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 44;
        if (!(context__.contains_r("cons_prey")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable cons_prey missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("cons_prey");
        pos__ = 0U;
        validate_non_negative_index("cons_prey", "m_fats", m_fats);
        validate_non_negative_index("cons_prey", "n_preys", n_preys);
        context__.validate_dims("parameter initialization", "cons_prey", "vector_d", context__.to_vec(n_preys,m_fats));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > cons_prey(n_preys, Eigen::Matrix<double, Eigen::Dynamic, 1>(m_fats));
        size_t cons_prey_j_1_max__ = m_fats;
        size_t cons_prey_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < cons_prey_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cons_prey_k_0_max__; ++k_0__) {
                cons_prey[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t cons_prey_i_0_max__ = n_preys;
        for (size_t i_0__ = 0; i_0__ < cons_prey_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(cons_prey[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable cons_prey: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 46;
        if (!(context__.contains_r("corr_prey")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable corr_prey missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("corr_prey");
        pos__ = 0U;
        validate_non_negative_index("corr_prey", "m_fats", m_fats);
        validate_non_negative_index("corr_prey", "m_fats", m_fats);
        validate_non_negative_index("corr_prey", "n_preys", n_preys);
        context__.validate_dims("parameter initialization", "corr_prey", "matrix_d", context__.to_vec(n_preys,m_fats,m_fats));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > corr_prey(n_preys, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(m_fats, m_fats));
        size_t corr_prey_j_2_max__ = m_fats;
        size_t corr_prey_j_1_max__ = m_fats;
        size_t corr_prey_k_0_max__ = n_preys;
        for (size_t j_2__ = 0; j_2__ < corr_prey_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_prey_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < corr_prey_k_0_max__; ++k_0__) {
                    corr_prey[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                }
            }
        }
        size_t corr_prey_i_0_max__ = n_preys;
        for (size_t i_0__ = 0; i_0__ < corr_prey_i_0_max__; ++i_0__) {
            try {
                writer__.cholesky_factor_corr_unconstrain(corr_prey[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable corr_prey: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 47;
        if (!(context__.contains_r("corr_pred")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable corr_pred missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("corr_pred");
        pos__ = 0U;
        validate_non_negative_index("corr_pred", "m_fats", m_fats);
        validate_non_negative_index("corr_pred", "m_fats", m_fats);
        context__.validate_dims("parameter initialization", "corr_pred", "matrix_d", context__.to_vec(m_fats,m_fats));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> corr_pred(m_fats, m_fats);
        size_t corr_pred_j_2_max__ = m_fats;
        size_t corr_pred_j_1_max__ = m_fats;
        for (size_t j_2__ = 0; j_2__ < corr_pred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_pred_j_1_max__; ++j_1__) {
                corr_pred(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(corr_pred);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable corr_pred: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 48;
        if (!(context__.contains_r("corr_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable corr_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("corr_mean");
        pos__ = 0U;
        validate_non_negative_index("corr_mean", "m_fats", m_fats);
        validate_non_negative_index("corr_mean", "m_fats", m_fats);
        context__.validate_dims("parameter initialization", "corr_mean", "matrix_d", context__.to_vec(m_fats,m_fats));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> corr_mean(m_fats, m_fats);
        size_t corr_mean_j_2_max__ = m_fats;
        size_t corr_mean_j_1_max__ = m_fats;
        for (size_t j_2__ = 0; j_2__ < corr_mean_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_mean_j_1_max__; ++j_1__) {
                corr_mean(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(corr_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable corr_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 49;
        if (!(context__.contains_r("tau_prey")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_prey missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_prey");
        pos__ = 0U;
        validate_non_negative_index("tau_prey", "m_fats", m_fats);
        validate_non_negative_index("tau_prey", "n_preys", n_preys);
        context__.validate_dims("parameter initialization", "tau_prey", "vector_d", context__.to_vec(n_preys,m_fats));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > tau_prey(n_preys, Eigen::Matrix<double, Eigen::Dynamic, 1>(m_fats));
        size_t tau_prey_j_1_max__ = m_fats;
        size_t tau_prey_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < tau_prey_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < tau_prey_k_0_max__; ++k_0__) {
                tau_prey[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t tau_prey_i_0_max__ = n_preys;
        for (size_t i_0__ = 0; i_0__ < tau_prey_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lb_unconstrain(0, tau_prey[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_prey: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 50;
        if (!(context__.contains_r("tau_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_mean");
        pos__ = 0U;
        validate_non_negative_index("tau_mean", "m_fats", m_fats);
        context__.validate_dims("parameter initialization", "tau_mean", "vector_d", context__.to_vec(m_fats));
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau_mean(m_fats);
        size_t tau_mean_j_1_max__ = m_fats;
        for (size_t j_1__ = 0; j_1__ < tau_mean_j_1_max__; ++j_1__) {
            tau_mean(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, tau_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 51;
        if (!(context__.contains_r("tau_pred")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_pred missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_pred");
        pos__ = 0U;
        validate_non_negative_index("tau_pred", "m_fats", m_fats);
        context__.validate_dims("parameter initialization", "tau_pred", "vector_d", context__.to_vec(m_fats));
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau_pred(m_fats);
        size_t tau_pred_j_1_max__ = m_fats;
        for (size_t j_1__ = 0; j_1__ < tau_pred_j_1_max__; ++j_1__) {
            tau_pred(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, tau_pred);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_pred: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 52;
        if (!(context__.contains_r("props")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable props missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("props");
        pos__ = 0U;
        validate_non_negative_index("props", "n_preys", n_preys);
        context__.validate_dims("parameter initialization", "props", "vector_d", context__.to_vec(n_preys));
        Eigen::Matrix<double, Eigen::Dynamic, 1> props(n_preys);
        size_t props_j_1_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < props_j_1_max__; ++j_1__) {
            props(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, props);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable props: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 41;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > prey_means;
            size_t prey_means_d_0_max__ = n_preys;
            prey_means.reserve(prey_means_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < prey_means_d_0_max__; ++d_0__) {
                if (jacobian__)
                    prey_means.push_back(in__.vector_constrain(m_fats, lp__));
                else
                    prey_means.push_back(in__.vector_constrain(m_fats));
            }

            current_statement_begin__ = 42;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > cs;
            size_t cs_d_0_max__ = n_preys;
            cs.reserve(cs_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < cs_d_0_max__; ++d_0__) {
                if (jacobian__)
                    cs.push_back(in__.vector_lb_constrain(0, n_fats, lp__));
                else
                    cs.push_back(in__.vector_lb_constrain(0, n_fats));
            }

            current_statement_begin__ = 43;
            std::vector<local_scalar_t__> fcs;
            size_t fcs_d_0_max__ = (fc_data ? n_preys : 0 );
            fcs.reserve(fcs_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < fcs_d_0_max__; ++d_0__) {
                if (jacobian__)
                    fcs.push_back(in__.scalar_lub_constrain(0, 10, lp__));
                else
                    fcs.push_back(in__.scalar_lub_constrain(0, 10));
            }

            current_statement_begin__ = 44;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > cons_prey;
            size_t cons_prey_d_0_max__ = n_preys;
            cons_prey.reserve(cons_prey_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < cons_prey_d_0_max__; ++d_0__) {
                if (jacobian__)
                    cons_prey.push_back(in__.vector_constrain(m_fats, lp__));
                else
                    cons_prey.push_back(in__.vector_constrain(m_fats));
            }

            current_statement_begin__ = 46;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > corr_prey;
            size_t corr_prey_d_0_max__ = n_preys;
            corr_prey.reserve(corr_prey_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < corr_prey_d_0_max__; ++d_0__) {
                if (jacobian__)
                    corr_prey.push_back(in__.cholesky_factor_corr_constrain(m_fats, lp__));
                else
                    corr_prey.push_back(in__.cholesky_factor_corr_constrain(m_fats));
            }

            current_statement_begin__ = 47;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> corr_pred;
            (void) corr_pred;  // dummy to suppress unused var warning
            if (jacobian__)
                corr_pred = in__.cholesky_factor_corr_constrain(m_fats, lp__);
            else
                corr_pred = in__.cholesky_factor_corr_constrain(m_fats);

            current_statement_begin__ = 48;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> corr_mean;
            (void) corr_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                corr_mean = in__.cholesky_factor_corr_constrain(m_fats, lp__);
            else
                corr_mean = in__.cholesky_factor_corr_constrain(m_fats);

            current_statement_begin__ = 49;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > tau_prey;
            size_t tau_prey_d_0_max__ = n_preys;
            tau_prey.reserve(tau_prey_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < tau_prey_d_0_max__; ++d_0__) {
                if (jacobian__)
                    tau_prey.push_back(in__.vector_lb_constrain(0, m_fats, lp__));
                else
                    tau_prey.push_back(in__.vector_lb_constrain(0, m_fats));
            }

            current_statement_begin__ = 50;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau_mean;
            (void) tau_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_mean = in__.vector_lb_constrain(0, m_fats, lp__);
            else
                tau_mean = in__.vector_lb_constrain(0, m_fats);

            current_statement_begin__ = 51;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau_pred;
            (void) tau_pred;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_pred = in__.vector_lb_constrain(0, m_fats, lp__);
            else
                tau_pred = in__.vector_lb_constrain(0, m_fats);

            current_statement_begin__ = 52;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> props;
            (void) props;  // dummy to suppress unused var warning
            if (jacobian__)
                props = in__.vector_lb_constrain(0, n_preys, lp__);
            else
                props = in__.vector_lb_constrain(0, n_preys);

            // transformed parameters
            current_statement_begin__ = 55;
            validate_non_negative_index("prey_precs", "m_fats", m_fats);
            validate_non_negative_index("prey_precs", "m_fats", m_fats);
            validate_non_negative_index("prey_precs", "n_preys", n_preys);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > prey_precs(n_preys, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(m_fats, m_fats));
            stan::math::initialize(prey_precs, DUMMY_VAR__);
            stan::math::fill(prey_precs, DUMMY_VAR__);

            current_statement_begin__ = 56;
            validate_non_negative_index("pred_prec", "m_fats", m_fats);
            validate_non_negative_index("pred_prec", "m_fats", m_fats);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> pred_prec(m_fats, m_fats);
            stan::math::initialize(pred_prec, DUMMY_VAR__);
            stan::math::fill(pred_prec, DUMMY_VAR__);

            current_statement_begin__ = 57;
            validate_non_negative_index("prop", "n_preys", n_preys);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> prop(n_preys);
            stan::math::initialize(prop, DUMMY_VAR__);
            stan::math::fill(prop, DUMMY_VAR__);

            current_statement_begin__ = 58;
            validate_non_negative_index("prey", "n_fats", n_fats);
            validate_non_negative_index("prey", "n_preys", n_preys);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> prey(n_fats, n_preys);
            stan::math::initialize(prey, DUMMY_VAR__);
            stan::math::fill(prey, DUMMY_VAR__);

            current_statement_begin__ = 59;
            validate_non_negative_index("c_prey", "n_fats", n_fats);
            validate_non_negative_index("c_prey", "n_preys", n_preys);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > c_prey(n_preys, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(n_fats));
            stan::math::initialize(c_prey, DUMMY_VAR__);
            stan::math::fill(c_prey, DUMMY_VAR__);

            current_statement_begin__ = 60;
            validate_non_negative_index("mu", "m_fats", m_fats);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(m_fats);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);

            current_statement_begin__ = 61;
            validate_non_negative_index("fc", "n_preys", n_preys);
            std::vector<local_scalar_t__> fc(n_preys, local_scalar_t__(0));
            stan::math::initialize(fc, DUMMY_VAR__);
            stan::math::fill(fc, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 63;
            stan::math::assign(prop, clo(props, pstream__));
            current_statement_begin__ = 65;
            if (as_bool(fc_data)) {

                current_statement_begin__ = 66;
                stan::math::assign(fc, fcs);
            } else {

                current_statement_begin__ = 68;
                stan::math::assign(fc, fc_base);
            }
            current_statement_begin__ = 71;
            for (int j = 1; j <= n_preys; ++j) {

                current_statement_begin__ = 73;
                stan::model::assign(prey_precs, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            diag_pre_multiply(get_base1(tau_prey, j, "tau_prey", 1), get_base1(corr_prey, j, "corr_prey", 1)), 
                            "assigning variable prey_precs");
                current_statement_begin__ = 74;
                stan::model::assign(c_prey, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(1, (n_fats - 1)), stan::model::nil_index_list())), 
                            stan::math::exp(get_base1(cons_prey, j, "cons_prey", 1)), 
                            "assigning variable c_prey");
                current_statement_begin__ = 75;
                stan::model::assign(c_prey, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(n_fats), stan::model::nil_index_list())), 
                            1, 
                            "assigning variable c_prey");
                current_statement_begin__ = 76;
                stan::model::assign(prey, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            elt_multiply(multiply(get_base1(fc, j, "fc", 1), get_base1(cs, j, "cs", 1)), get_base1(c_prey, j, "c_prey", 1)), 
                            "assigning variable prey");
            }
            current_statement_begin__ = 79;
            stan::math::assign(mu, alr(multiply(prey, prop), n_fats, pstream__));
            current_statement_begin__ = 81;
            stan::math::assign(pred_prec, diag_pre_multiply(tau_pred, corr_pred));

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 55;
            size_t prey_precs_k_0_max__ = n_preys;
            size_t prey_precs_j_1_max__ = m_fats;
            size_t prey_precs_j_2_max__ = m_fats;
            for (size_t k_0__ = 0; k_0__ < prey_precs_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < prey_precs_j_1_max__; ++j_1__) {
                    for (size_t j_2__ = 0; j_2__ < prey_precs_j_2_max__; ++j_2__) {
                        if (stan::math::is_uninitialized(prey_precs[k_0__](j_1__, j_2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: prey_precs" << "[" << k_0__ << "]" << "(" << j_1__ << ", " << j_2__ << ")";
                            stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable prey_precs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                        }
                    }
                }
            }
            current_statement_begin__ = 56;
            size_t pred_prec_j_1_max__ = m_fats;
            size_t pred_prec_j_2_max__ = m_fats;
            for (size_t j_1__ = 0; j_1__ < pred_prec_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < pred_prec_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(pred_prec(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: pred_prec" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable pred_prec: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 57;
            size_t prop_j_1_max__ = n_preys;
            for (size_t j_1__ = 0; j_1__ < prop_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(prop(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: prop" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable prop: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            stan::math::check_simplex(function__, "prop", prop);

            current_statement_begin__ = 58;
            size_t prey_j_1_max__ = n_fats;
            size_t prey_j_2_max__ = n_preys;
            for (size_t j_1__ = 0; j_1__ < prey_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < prey_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(prey(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: prey" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable prey: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 59;
            size_t c_prey_k_0_max__ = n_preys;
            size_t c_prey_j_1_max__ = n_fats;
            for (size_t k_0__ = 0; k_0__ < c_prey_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < c_prey_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(c_prey[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: c_prey" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable c_prey: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 60;
            size_t mu_j_1_max__ = m_fats;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 61;
            size_t fc_k_0_max__ = n_preys;
            for (size_t k_0__ = 0; k_0__ < fc_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(fc[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: fc" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable fc: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body

            current_statement_begin__ = 87;
            for (int ps = 1; ps <= n_prey_samps; ++ps) {
                current_statement_begin__ = 87;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(preys, ps, "preys", 1), get_base1(prey_means, get_base1(prey_ix, ps, "prey_ix", 1), "prey_means", 1), get_base1(prey_precs, get_base1(prey_ix, ps, "prey_ix", 1), "prey_precs", 1)));
            }
            current_statement_begin__ = 91;
            for (int p = 1; p <= n_preds; ++p) {
                current_statement_begin__ = 91;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(preds, p, "preds", 1), mu, pred_prec));
            }
            current_statement_begin__ = 93;
            lp_accum__.add(gamma_log<propto__>(props, 1, 1));
            current_statement_begin__ = 95;
            if (as_bool(fc_data)) {
                current_statement_begin__ = 95;
                lp_accum__.add(lognormal_log<propto__>(fcs, fc_mean, stan::math::sqrt(elt_divide(1.0, fc_tau))));
            }
            current_statement_begin__ = 97;
            for (int j = 1; j <= n_preys; ++j) {

                current_statement_begin__ = 99;
                lp_accum__.add(normal_log<propto__>(get_base1(tau_prey, j, "tau_prey", 1), 0, 10));
                current_statement_begin__ = 100;
                lp_accum__.add(lkj_corr_cholesky_log<propto__>(get_base1(corr_prey, j, "corr_prey", 1), 1));
                current_statement_begin__ = 102;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(prey_means, j, "prey_means", 1), get_base1(preym, j, "preym", 1), diag_pre_multiply(tau_mean, corr_mean)));
                current_statement_begin__ = 103;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(cons_prey, j, "cons_prey", 1), get_base1(prey_means, j, "prey_means", 1), get_base1(prey_precs, j, "prey_precs", 1)));
                current_statement_begin__ = 105;
                lp_accum__.add(gamma_log<propto__>(get_base1(cs, j, "cs", 1), get_base1(mean_c, j, "mean_c", 1), get_base1(tau_coeffs, j, "tau_coeffs", 1)));
            }
            current_statement_begin__ = 111;
            lp_accum__.add(normal_log<propto__>(tau_pred, 0, 10));
            current_statement_begin__ = 112;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(corr_pred, 1));
            current_statement_begin__ = 114;
            lp_accum__.add(normal_log<propto__>(tau_mean, 0, 10));
            current_statement_begin__ = 115;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(corr_mean, 1));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("prey_means");
        names__.push_back("cs");
        names__.push_back("fcs");
        names__.push_back("cons_prey");
        names__.push_back("corr_prey");
        names__.push_back("corr_pred");
        names__.push_back("corr_mean");
        names__.push_back("tau_prey");
        names__.push_back("tau_mean");
        names__.push_back("tau_pred");
        names__.push_back("props");
        names__.push_back("prey_precs");
        names__.push_back("pred_prec");
        names__.push_back("prop");
        names__.push_back("prey");
        names__.push_back("c_prey");
        names__.push_back("mu");
        names__.push_back("fc");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(m_fats);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(n_fats);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((fc_data ? n_preys : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(m_fats);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(m_fats);
        dims__.push_back(m_fats);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m_fats);
        dims__.push_back(m_fats);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m_fats);
        dims__.push_back(m_fats);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(m_fats);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m_fats);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m_fats);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(m_fats);
        dims__.push_back(m_fats);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m_fats);
        dims__.push_back(m_fats);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_fats);
        dims__.push_back(n_preys);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dims__.push_back(n_fats);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m_fats);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_preys);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_Pop_prop_analysis_FA_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prey_means;
        size_t prey_means_d_0_max__ = n_preys;
        prey_means.reserve(prey_means_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < prey_means_d_0_max__; ++d_0__) {
            prey_means.push_back(in__.vector_constrain(m_fats));
        }
        size_t prey_means_j_1_max__ = m_fats;
        size_t prey_means_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < prey_means_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prey_means_k_0_max__; ++k_0__) {
                vars__.push_back(prey_means[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > cs;
        size_t cs_d_0_max__ = n_preys;
        cs.reserve(cs_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < cs_d_0_max__; ++d_0__) {
            cs.push_back(in__.vector_lb_constrain(0, n_fats));
        }
        size_t cs_j_1_max__ = n_fats;
        size_t cs_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < cs_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cs_k_0_max__; ++k_0__) {
                vars__.push_back(cs[k_0__](j_1__));
            }
        }

        std::vector<double> fcs;
        size_t fcs_d_0_max__ = (fc_data ? n_preys : 0 );
        fcs.reserve(fcs_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < fcs_d_0_max__; ++d_0__) {
            fcs.push_back(in__.scalar_lub_constrain(0, 10));
        }
        size_t fcs_k_0_max__ = (fc_data ? n_preys : 0 );
        for (size_t k_0__ = 0; k_0__ < fcs_k_0_max__; ++k_0__) {
            vars__.push_back(fcs[k_0__]);
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > cons_prey;
        size_t cons_prey_d_0_max__ = n_preys;
        cons_prey.reserve(cons_prey_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < cons_prey_d_0_max__; ++d_0__) {
            cons_prey.push_back(in__.vector_constrain(m_fats));
        }
        size_t cons_prey_j_1_max__ = m_fats;
        size_t cons_prey_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < cons_prey_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cons_prey_k_0_max__; ++k_0__) {
                vars__.push_back(cons_prey[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > corr_prey;
        size_t corr_prey_d_0_max__ = n_preys;
        corr_prey.reserve(corr_prey_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < corr_prey_d_0_max__; ++d_0__) {
            corr_prey.push_back(in__.cholesky_factor_corr_constrain(m_fats));
        }
        size_t corr_prey_j_2_max__ = m_fats;
        size_t corr_prey_j_1_max__ = m_fats;
        size_t corr_prey_k_0_max__ = n_preys;
        for (size_t j_2__ = 0; j_2__ < corr_prey_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_prey_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < corr_prey_k_0_max__; ++k_0__) {
                    vars__.push_back(corr_prey[k_0__](j_1__, j_2__));
                }
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> corr_pred = in__.cholesky_factor_corr_constrain(m_fats);
        size_t corr_pred_j_2_max__ = m_fats;
        size_t corr_pred_j_1_max__ = m_fats;
        for (size_t j_2__ = 0; j_2__ < corr_pred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_pred_j_1_max__; ++j_1__) {
                vars__.push_back(corr_pred(j_1__, j_2__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> corr_mean = in__.cholesky_factor_corr_constrain(m_fats);
        size_t corr_mean_j_2_max__ = m_fats;
        size_t corr_mean_j_1_max__ = m_fats;
        for (size_t j_2__ = 0; j_2__ < corr_mean_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_mean_j_1_max__; ++j_1__) {
                vars__.push_back(corr_mean(j_1__, j_2__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > tau_prey;
        size_t tau_prey_d_0_max__ = n_preys;
        tau_prey.reserve(tau_prey_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < tau_prey_d_0_max__; ++d_0__) {
            tau_prey.push_back(in__.vector_lb_constrain(0, m_fats));
        }
        size_t tau_prey_j_1_max__ = m_fats;
        size_t tau_prey_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < tau_prey_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < tau_prey_k_0_max__; ++k_0__) {
                vars__.push_back(tau_prey[k_0__](j_1__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> tau_mean = in__.vector_lb_constrain(0, m_fats);
        size_t tau_mean_j_1_max__ = m_fats;
        for (size_t j_1__ = 0; j_1__ < tau_mean_j_1_max__; ++j_1__) {
            vars__.push_back(tau_mean(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> tau_pred = in__.vector_lb_constrain(0, m_fats);
        size_t tau_pred_j_1_max__ = m_fats;
        for (size_t j_1__ = 0; j_1__ < tau_pred_j_1_max__; ++j_1__) {
            vars__.push_back(tau_pred(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> props = in__.vector_lb_constrain(0, n_preys);
        size_t props_j_1_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < props_j_1_max__; ++j_1__) {
            vars__.push_back(props(j_1__));
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 55;
            validate_non_negative_index("prey_precs", "m_fats", m_fats);
            validate_non_negative_index("prey_precs", "m_fats", m_fats);
            validate_non_negative_index("prey_precs", "n_preys", n_preys);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > prey_precs(n_preys, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(m_fats, m_fats));
            stan::math::initialize(prey_precs, DUMMY_VAR__);
            stan::math::fill(prey_precs, DUMMY_VAR__);

            current_statement_begin__ = 56;
            validate_non_negative_index("pred_prec", "m_fats", m_fats);
            validate_non_negative_index("pred_prec", "m_fats", m_fats);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> pred_prec(m_fats, m_fats);
            stan::math::initialize(pred_prec, DUMMY_VAR__);
            stan::math::fill(pred_prec, DUMMY_VAR__);

            current_statement_begin__ = 57;
            validate_non_negative_index("prop", "n_preys", n_preys);
            Eigen::Matrix<double, Eigen::Dynamic, 1> prop(n_preys);
            stan::math::initialize(prop, DUMMY_VAR__);
            stan::math::fill(prop, DUMMY_VAR__);

            current_statement_begin__ = 58;
            validate_non_negative_index("prey", "n_fats", n_fats);
            validate_non_negative_index("prey", "n_preys", n_preys);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> prey(n_fats, n_preys);
            stan::math::initialize(prey, DUMMY_VAR__);
            stan::math::fill(prey, DUMMY_VAR__);

            current_statement_begin__ = 59;
            validate_non_negative_index("c_prey", "n_fats", n_fats);
            validate_non_negative_index("c_prey", "n_preys", n_preys);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > c_prey(n_preys, Eigen::Matrix<double, Eigen::Dynamic, 1>(n_fats));
            stan::math::initialize(c_prey, DUMMY_VAR__);
            stan::math::fill(c_prey, DUMMY_VAR__);

            current_statement_begin__ = 60;
            validate_non_negative_index("mu", "m_fats", m_fats);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu(m_fats);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);

            current_statement_begin__ = 61;
            validate_non_negative_index("fc", "n_preys", n_preys);
            std::vector<double> fc(n_preys, double(0));
            stan::math::initialize(fc, DUMMY_VAR__);
            stan::math::fill(fc, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 63;
            stan::math::assign(prop, clo(props, pstream__));
            current_statement_begin__ = 65;
            if (as_bool(fc_data)) {

                current_statement_begin__ = 66;
                stan::math::assign(fc, fcs);
            } else {

                current_statement_begin__ = 68;
                stan::math::assign(fc, fc_base);
            }
            current_statement_begin__ = 71;
            for (int j = 1; j <= n_preys; ++j) {

                current_statement_begin__ = 73;
                stan::model::assign(prey_precs, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            diag_pre_multiply(get_base1(tau_prey, j, "tau_prey", 1), get_base1(corr_prey, j, "corr_prey", 1)), 
                            "assigning variable prey_precs");
                current_statement_begin__ = 74;
                stan::model::assign(c_prey, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(1, (n_fats - 1)), stan::model::nil_index_list())), 
                            stan::math::exp(get_base1(cons_prey, j, "cons_prey", 1)), 
                            "assigning variable c_prey");
                current_statement_begin__ = 75;
                stan::model::assign(c_prey, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(n_fats), stan::model::nil_index_list())), 
                            1, 
                            "assigning variable c_prey");
                current_statement_begin__ = 76;
                stan::model::assign(prey, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            elt_multiply(multiply(get_base1(fc, j, "fc", 1), get_base1(cs, j, "cs", 1)), get_base1(c_prey, j, "c_prey", 1)), 
                            "assigning variable prey");
            }
            current_statement_begin__ = 79;
            stan::math::assign(mu, alr(multiply(prey, prop), n_fats, pstream__));
            current_statement_begin__ = 81;
            stan::math::assign(pred_prec, diag_pre_multiply(tau_pred, corr_pred));

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 57;
            stan::math::check_simplex(function__, "prop", prop);

            // write transformed parameters
            if (include_tparams__) {
                size_t prey_precs_j_2_max__ = m_fats;
                size_t prey_precs_j_1_max__ = m_fats;
                size_t prey_precs_k_0_max__ = n_preys;
                for (size_t j_2__ = 0; j_2__ < prey_precs_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < prey_precs_j_1_max__; ++j_1__) {
                        for (size_t k_0__ = 0; k_0__ < prey_precs_k_0_max__; ++k_0__) {
                            vars__.push_back(prey_precs[k_0__](j_1__, j_2__));
                        }
                    }
                }
                size_t pred_prec_j_2_max__ = m_fats;
                size_t pred_prec_j_1_max__ = m_fats;
                for (size_t j_2__ = 0; j_2__ < pred_prec_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < pred_prec_j_1_max__; ++j_1__) {
                        vars__.push_back(pred_prec(j_1__, j_2__));
                    }
                }
                size_t prop_j_1_max__ = n_preys;
                for (size_t j_1__ = 0; j_1__ < prop_j_1_max__; ++j_1__) {
                    vars__.push_back(prop(j_1__));
                }
                size_t prey_j_2_max__ = n_preys;
                size_t prey_j_1_max__ = n_fats;
                for (size_t j_2__ = 0; j_2__ < prey_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < prey_j_1_max__; ++j_1__) {
                        vars__.push_back(prey(j_1__, j_2__));
                    }
                }
                size_t c_prey_j_1_max__ = n_fats;
                size_t c_prey_k_0_max__ = n_preys;
                for (size_t j_1__ = 0; j_1__ < c_prey_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < c_prey_k_0_max__; ++k_0__) {
                        vars__.push_back(c_prey[k_0__](j_1__));
                    }
                }
                size_t mu_j_1_max__ = m_fats;
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    vars__.push_back(mu(j_1__));
                }
                size_t fc_k_0_max__ = n_preys;
                for (size_t k_0__ = 0; k_0__ < fc_k_0_max__; ++k_0__) {
                    vars__.push_back(fc[k_0__]);
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "model_Pop_prop_analysis_FA";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t prey_means_j_1_max__ = m_fats;
        size_t prey_means_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < prey_means_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prey_means_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prey_means" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t cs_j_1_max__ = n_fats;
        size_t cs_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < cs_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cs_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cs" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t fcs_k_0_max__ = (fc_data ? n_preys : 0 );
        for (size_t k_0__ = 0; k_0__ < fcs_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "fcs" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t cons_prey_j_1_max__ = m_fats;
        size_t cons_prey_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < cons_prey_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cons_prey_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cons_prey" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t corr_prey_j_2_max__ = m_fats;
        size_t corr_prey_j_1_max__ = m_fats;
        size_t corr_prey_k_0_max__ = n_preys;
        for (size_t j_2__ = 0; j_2__ < corr_prey_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_prey_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < corr_prey_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "corr_prey" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t corr_pred_j_2_max__ = m_fats;
        size_t corr_pred_j_1_max__ = m_fats;
        for (size_t j_2__ = 0; j_2__ < corr_pred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr_pred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t corr_mean_j_2_max__ = m_fats;
        size_t corr_mean_j_1_max__ = m_fats;
        for (size_t j_2__ = 0; j_2__ < corr_mean_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_mean_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr_mean" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t tau_prey_j_1_max__ = m_fats;
        size_t tau_prey_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < tau_prey_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < tau_prey_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau_prey" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t tau_mean_j_1_max__ = m_fats;
        for (size_t j_1__ = 0; j_1__ < tau_mean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_mean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tau_pred_j_1_max__ = m_fats;
        for (size_t j_1__ = 0; j_1__ < tau_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t props_j_1_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < props_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "props" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t prey_precs_j_2_max__ = m_fats;
            size_t prey_precs_j_1_max__ = m_fats;
            size_t prey_precs_k_0_max__ = n_preys;
            for (size_t j_2__ = 0; j_2__ < prey_precs_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prey_precs_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < prey_precs_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "prey_precs" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            size_t pred_prec_j_2_max__ = m_fats;
            size_t pred_prec_j_1_max__ = m_fats;
            for (size_t j_2__ = 0; j_2__ < pred_prec_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < pred_prec_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pred_prec" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t prop_j_1_max__ = n_preys;
            for (size_t j_1__ = 0; j_1__ < prop_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t prey_j_2_max__ = n_preys;
            size_t prey_j_1_max__ = n_fats;
            for (size_t j_2__ = 0; j_2__ < prey_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prey_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prey" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t c_prey_j_1_max__ = n_fats;
            size_t c_prey_k_0_max__ = n_preys;
            for (size_t j_1__ = 0; j_1__ < c_prey_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < c_prey_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "c_prey" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t mu_j_1_max__ = m_fats;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t fc_k_0_max__ = n_preys;
            for (size_t k_0__ = 0; k_0__ < fc_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "fc" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t prey_means_j_1_max__ = m_fats;
        size_t prey_means_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < prey_means_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prey_means_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prey_means" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t cs_j_1_max__ = n_fats;
        size_t cs_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < cs_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cs_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cs" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t fcs_k_0_max__ = (fc_data ? n_preys : 0 );
        for (size_t k_0__ = 0; k_0__ < fcs_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "fcs" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t cons_prey_j_1_max__ = m_fats;
        size_t cons_prey_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < cons_prey_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cons_prey_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cons_prey" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t corr_prey_j_1_max__ = ((m_fats * (m_fats - 1)) / 2);
        size_t corr_prey_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < corr_prey_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < corr_prey_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr_prey" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t corr_pred_j_1_max__ = ((m_fats * (m_fats - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < corr_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "corr_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t corr_mean_j_1_max__ = ((m_fats * (m_fats - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < corr_mean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "corr_mean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tau_prey_j_1_max__ = m_fats;
        size_t tau_prey_k_0_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < tau_prey_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < tau_prey_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau_prey" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t tau_mean_j_1_max__ = m_fats;
        for (size_t j_1__ = 0; j_1__ < tau_mean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_mean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tau_pred_j_1_max__ = m_fats;
        for (size_t j_1__ = 0; j_1__ < tau_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t props_j_1_max__ = n_preys;
        for (size_t j_1__ = 0; j_1__ < props_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "props" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t prey_precs_j_2_max__ = m_fats;
            size_t prey_precs_j_1_max__ = m_fats;
            size_t prey_precs_k_0_max__ = n_preys;
            for (size_t j_2__ = 0; j_2__ < prey_precs_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prey_precs_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < prey_precs_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "prey_precs" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
            size_t pred_prec_j_2_max__ = m_fats;
            size_t pred_prec_j_1_max__ = m_fats;
            for (size_t j_2__ = 0; j_2__ < pred_prec_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < pred_prec_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pred_prec" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t prop_j_1_max__ = (n_preys - 1);
            for (size_t j_1__ = 0; j_1__ < prop_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t prey_j_2_max__ = n_preys;
            size_t prey_j_1_max__ = n_fats;
            for (size_t j_2__ = 0; j_2__ < prey_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prey_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prey" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t c_prey_j_1_max__ = n_fats;
            size_t c_prey_k_0_max__ = n_preys;
            for (size_t j_1__ = 0; j_1__ < c_prey_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < c_prey_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "c_prey" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t mu_j_1_max__ = m_fats;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t fc_k_0_max__ = n_preys;
            for (size_t k_0__ = 0; k_0__ < fc_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "fc" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef model_Pop_prop_analysis_FA_namespace::model_Pop_prop_analysis_FA stan_model;

#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


#endif
